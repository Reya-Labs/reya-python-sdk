# coding: utf-8

"""
    Reya DEX Trading API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MarketSummary(BaseModel):
    """
    MarketSummary
    """ # noqa: E501
    symbol: Annotated[str, Field(strict=True)] = Field(description="Trading symbol (e.g., BTCRUSDPERP, ETHRUSD)")
    updated_at: StrictInt = Field(description="Time when the market summary was last calculated (milliseconds)", alias="updatedAt")
    long_oi_qty: StrictStr = Field(description="Long open interest in lots", alias="longOiQty")
    short_oi_qty: StrictStr = Field(description="Short open interest in lots", alias="shortOiQty")
    oi_qty: StrictStr = Field(description="Total open interest quantity", alias="oiQty")
    funding_rate: StrictStr = Field(description="Current hourly funding rate", alias="fundingRate")
    long_funding_value: StrictStr = Field(description="Current reference value of funding accrued by one unit of exposure; there is one funding value per market and per direction, with short v long funding values differing possibly due to Auto-Deleveraging (ADL)", alias="longFundingValue")
    short_funding_value: StrictStr = Field(description="Current reference value of funding accrued by one unit of exposure; there is one funding value per market and per direction, with short v long funding values differing possibly due to Auto-Deleveraging (ADL)", alias="shortFundingValue")
    funding_rate_velocity: StrictStr = Field(description="Funding rate velocity", alias="fundingRateVelocity")
    volume24h: StrictStr
    px_change24h: Optional[StrictStr] = Field(default=None, alias="pxChange24h")
    throttled_oracle_price: Optional[StrictStr] = Field(default=None, description="Last oracle price, at the moment of the last market summary update", alias="throttledOraclePrice")
    throttled_pool_price: Optional[StrictStr] = Field(default=None, description="Last pool price, at the moment of the last market summary update", alias="throttledPoolPrice")
    prices_updated_at: Optional[StrictInt] = Field(default=None, description="Timestamp of the last price update (milliseconds)", alias="pricesUpdatedAt")
    __properties: ClassVar[List[str]] = ["symbol", "updatedAt", "longOiQty", "shortOiQty", "oiQty", "fundingRate", "longFundingValue", "shortFundingValue", "fundingRateVelocity", "volume24h", "pxChange24h", "throttledOraclePrice", "throttledPoolPrice", "pricesUpdatedAt"]

    @field_validator('symbol')
    def symbol_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "updatedAt": obj.get("updatedAt"),
            "longOiQty": obj.get("longOiQty"),
            "shortOiQty": obj.get("shortOiQty"),
            "oiQty": obj.get("oiQty"),
            "fundingRate": obj.get("fundingRate"),
            "longFundingValue": obj.get("longFundingValue"),
            "shortFundingValue": obj.get("shortFundingValue"),
            "fundingRateVelocity": obj.get("fundingRateVelocity"),
            "volume24h": obj.get("volume24h"),
            "pxChange24h": obj.get("pxChange24h"),
            "throttledOraclePrice": obj.get("throttledOraclePrice"),
            "throttledPoolPrice": obj.get("throttledPoolPrice"),
            "pricesUpdatedAt": obj.get("pricesUpdatedAt")
        })
        return _obj


