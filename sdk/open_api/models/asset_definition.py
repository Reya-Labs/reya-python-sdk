# coding: utf-8

"""
    Reya DEX Trading API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AssetDefinition(BaseModel):
    """
    AssetDefinition
    """ # noqa: E501
    asset: Annotated[str, Field(strict=True)] = Field(description="Trading Asset (e.g., RUSD, WSTETH, BTC, ETH)")
    spot_market_symbol: Annotated[str, Field(strict=True)] = Field(description="Trading symbol (e.g., BTCRUSDPERP, ETHRUSD)", alias="spotMarketSymbol")
    price_haircut: Annotated[str, Field(strict=True)] = Field(description="Non-negative decimal string", alias="priceHaircut")
    liquidation_discount: Annotated[str, Field(strict=True)] = Field(description="Non-negative decimal string", alias="liquidationDiscount")
    timestamp: Annotated[int, Field(strict=True, ge=0)] = Field(description="Unsigned integer")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["asset", "spotMarketSymbol", "priceHaircut", "liquidationDiscount", "timestamp"]

    @field_validator('asset')
    def asset_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9]+$/")
        return value

    @field_validator('spot_market_symbol')
    def spot_market_symbol_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9]+$/")
        return value

    @field_validator('price_haircut')
    def price_haircut_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+(\.\d+)?$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)?$/")
        return value

    @field_validator('liquidation_discount')
    def liquidation_discount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+(\.\d+)?$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "spotMarketSymbol": obj.get("spotMarketSymbol"),
            "priceHaircut": obj.get("priceHaircut"),
            "liquidationDiscount": obj.get("liquidationDiscount"),
            "timestamp": obj.get("timestamp")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


