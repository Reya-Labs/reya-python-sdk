# coding: utf-8

"""
    Reya DEX Trading API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    exchange_id: StrictInt = Field(alias="exchangeId")
    symbol: StrictStr
    account_id: StrictInt = Field(alias="accountId")
    order_id: StrictStr = Field(alias="orderId")
    qty: Optional[StrictStr] = None
    exec_qty: Optional[StrictStr] = Field(default=None, description="Executed quantity. Example: I request 1.0 BTCRUSDPERP and the order is filled with 0.2 BTCRUSDPERP, qty will stay at 1.0 and execQty will be 0.2.", alias="execQty")
    side: StrictStr = Field(description="Order side (B = Buy/Bid, A = Ask/Sell)")
    limit_px: StrictStr = Field(alias="limitPx")
    order_type: StrictStr = Field(description="Order type, (LIMIT = Limit, TP = Take Profit, SL = Stop Loss)", alias="orderType")
    trigger_px: Optional[StrictStr] = Field(default=None, description="Price at which TP/SL orders will be triggered, should not be set for other order types.", alias="triggerPx")
    time_in_force: Optional[StrictStr] = Field(default=None, description="Order time in force, exclusively used for LIMIT orders", alias="timeInForce")
    reduce_only: Optional[StrictBool] = Field(default=None, description="Whether this is a reduce-only order, exclusively used for LIMIT IOC orders.", alias="reduceOnly")
    status: StrictStr = Field(description="Order status")
    created_at: StrictInt = Field(description="Creation timestamp (milliseconds)", alias="createdAt")
    last_update_at: StrictInt = Field(description="Last update timestamp (milliseconds)", alias="lastUpdateAt")
    __properties: ClassVar[List[str]] = ["exchangeId", "symbol", "accountId", "orderId", "qty", "execQty", "side", "limitPx", "orderType", "triggerPx", "timeInForce", "reduceOnly", "status", "createdAt", "lastUpdateAt"]

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['B', 'A']):
            raise ValueError("must be one of enum values ('B', 'A')")
        return value

    @field_validator('order_type')
    def order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['LIMIT', 'TP', 'SL']):
            raise ValueError("must be one of enum values ('LIMIT', 'TP', 'SL')")
        return value

    @field_validator('time_in_force')
    def time_in_force_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IOC', 'GTC']):
            raise ValueError("must be one of enum values ('IOC', 'GTC')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OPEN', 'FILLED', 'CANCELLED', 'REJECTED']):
            raise ValueError("must be one of enum values ('OPEN', 'FILLED', 'CANCELLED', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exchangeId": obj.get("exchangeId"),
            "symbol": obj.get("symbol"),
            "accountId": obj.get("accountId"),
            "orderId": obj.get("orderId"),
            "qty": obj.get("qty"),
            "execQty": obj.get("execQty"),
            "side": obj.get("side"),
            "limitPx": obj.get("limitPx"),
            "orderType": obj.get("orderType"),
            "triggerPx": obj.get("triggerPx"),
            "timeInForce": obj.get("timeInForce"),
            "reduceOnly": obj.get("reduceOnly"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "lastUpdateAt": obj.get("lastUpdateAt")
        })
        return _obj


