# coding: utf-8

"""
    Reya DEX Trading API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sdk.open_api.models.order_type import OrderType
from sdk.open_api.models.time_in_force import TimeInForce
from typing import Optional, Set
from typing_extensions import Self

class CreateOrderRequest(BaseModel):
    """
    CreateOrderRequest
    """ # noqa: E501
    exchange_id: StrictInt = Field(alias="exchangeId")
    symbol: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Trading symbol (e.g., BTCRUSDPERP, ETHRUSD)")
    account_id: StrictInt = Field(alias="accountId")
    is_buy: StrictBool = Field(description="Whether this is a buy order", alias="isBuy")
    limit_px: StrictStr = Field(alias="limitPx")
    qty: Optional[StrictStr] = None
    order_type: OrderType = Field(alias="orderType")
    time_in_force: Optional[TimeInForce] = Field(default=None, alias="timeInForce")
    trigger_px: Optional[StrictStr] = Field(default=None, description="Trigger price, only for TP/SL orders", alias="triggerPx")
    reduce_only: Optional[StrictBool] = Field(default=None, description="Whether this is a reduce-only order, exclusively used for LIMIT IOC orders.", alias="reduceOnly")
    signature: StrictStr = Field(description="See signatures and nonces section for more details on how to generate.")
    nonce: StrictStr = Field(description="Order nonce, see signatures and nonces section for more details.")
    signer_wallet: Annotated[str, Field(strict=True)] = Field(description="Ethereum wallet address", alias="signerWallet")
    expires_after: Optional[StrictInt] = Field(default=None, description="Expiration timestamp (exclusively for IOC orders). The order will only be filled before this timestamp.", alias="expiresAfter")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["exchangeId", "symbol", "accountId", "isBuy", "limitPx", "qty", "orderType", "timeInForce", "triggerPx", "reduceOnly", "signature", "nonce", "signerWallet", "expiresAfter"]

    @field_validator('symbol')
    def symbol_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9]+$/")
        return value

    @field_validator('signer_wallet')
    def signer_wallet_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[a-fA-F0-9]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{40}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exchangeId": obj.get("exchangeId"),
            "symbol": obj.get("symbol"),
            "accountId": obj.get("accountId"),
            "isBuy": obj.get("isBuy"),
            "limitPx": obj.get("limitPx"),
            "qty": obj.get("qty"),
            "orderType": obj.get("orderType"),
            "timeInForce": obj.get("timeInForce"),
            "triggerPx": obj.get("triggerPx"),
            "reduceOnly": obj.get("reduceOnly"),
            "signature": obj.get("signature"),
            "nonce": obj.get("nonce"),
            "signerWallet": obj.get("signerWallet"),
            "expiresAfter": obj.get("expiresAfter")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


