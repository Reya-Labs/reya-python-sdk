# coding: utf-8

"""
    Reya DEX Trading API v2

    API for Reya Network's decentralized exchange. 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class MarketDefinition(BaseModel):
    """
    MarketDefinition
    """ # noqa: E501
    symbol: StrictStr = Field(description="Market symbol")
    market_id: Union[StrictFloat, StrictInt] = Field(description="Market ID", alias="marketId")
    maturity: StrictStr = Field(description="Market maturity type")
    settlement_asset: StrictStr = Field(description="Settlement asset", alias="settlementAsset")
    min_order_qty: StrictStr = Field(description="Minimum order quantity", alias="minOrderQty")
    lot_size: StrictStr = Field(description="Lot size for trading", alias="lotSize")
    tick_size: StrictStr = Field(description="Minimum price increment", alias="tickSize")
    liquidation_margin_parameter: StrictStr = Field(description="Liquidation margin requirement parameter", alias="liquidationMarginParameter")
    initial_margin_parameter: StrictStr = Field(description="Initial margin requirement parameter", alias="initialMarginParameter")
    max_leverage: Union[StrictFloat, StrictInt] = Field(description="Maximum leverage allowed", alias="maxLeverage")
    oi_cap: StrictStr = Field(description="Open interest cap", alias="oiCap")
    __properties: ClassVar[List[str]] = ["symbol", "marketId", "maturity", "settlementAsset", "minOrderQty", "lotSize", "tickSize", "liquidationMarginParameter", "initialMarginParameter", "maxLeverage", "oiCap"]

    @field_validator('maturity')
    def maturity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PERPETUAL']):
            raise ValueError("must be one of enum values ('PERPETUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "marketId": obj.get("marketId"),
            "maturity": obj.get("maturity"),
            "settlementAsset": obj.get("settlementAsset"),
            "minOrderQty": obj.get("minOrderQty"),
            "lotSize": obj.get("lotSize"),
            "tickSize": obj.get("tickSize"),
            "liquidationMarginParameter": obj.get("liquidationMarginParameter"),
            "initialMarginParameter": obj.get("initialMarginParameter"),
            "maxLeverage": obj.get("maxLeverage"),
            "oiCap": obj.get("oiCap")
        })
        return _obj


