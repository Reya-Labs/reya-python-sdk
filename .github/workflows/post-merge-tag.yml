name: Post-Merge Tagging and PyPI Publishing

on:
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - 'sdk/_version.py'

jobs:
  tag-and-publish:
    runs-on: ubuntu-latest
    environment: pypi-publishing
    permissions:
      contents: write
      id-token: write  # Required for PyPI trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install tomli poetry

      - name: Get current version
        id: current-version
        run: |
          SDK_VERSION=$(python -c "
          import tomli
          with open('pyproject.toml', 'rb') as f:
              data = tomli.load(f)
          print(data['project']['version'])
          ")
          echo "sdk_version=$SDK_VERSION" >> $GITHUB_OUTPUT
          echo "Current SDK version: $SDK_VERSION"

      - name: Check if version is new
        id: check-version-new
        run: |
          VERSION="${{ steps.current-version.outputs.sdk_version }}"
          
          # Check if tag already exists
          if git tag -l | grep -q "^v${VERSION}$"; then
            echo "version_is_new=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Tag v$VERSION already exists"
          else
            echo "version_is_new=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version v$VERSION is new"
          fi

      - name: Validate version format
        if: steps.check-version-new.outputs.version_is_new == 'true'
        run: |
          VERSION="${{ steps.current-version.outputs.sdk_version }}"
          
          # Check that version has exactly 4 digits (X.Y.Z.W format)
          VERSION_PARTS=$(echo "$VERSION" | tr '.' '\n' | wc -l)
          if [ "$VERSION_PARTS" -ne 4 ]; then
            echo "‚ùå ERROR: SDK version must have exactly 4 digits (X.Y.Z.W format)"
            echo "Found $VERSION_PARTS parts in version: $VERSION"
            exit 1
          fi
          echo "‚úÖ Version format validated: $VERSION"

      - name: Create version tag
        if: steps.check-version-new.outputs.version_is_new == 'true'
        run: |
          VERSION="${{ steps.current-version.outputs.sdk_version }}"
          COMMIT_SHA="${{ github.sha }}"
          
          # Create annotated tag with v prefix
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$VERSION" -m "Release version v$VERSION
          
          Auto-tagged after merge to main branch.
          
          Reya Python SDK Release v$VERSION
          - REST API client for Reya's Trading API
          - RPC client for on-chain actions  
          - WebSocket client for real-time data streaming"
          
          echo "‚úÖ Created tag v$VERSION for commit $COMMIT_SHA"

      - name: Push tag
        if: steps.check-version-new.outputs.version_is_new == 'true'
        run: |
          VERSION="${{ steps.current-version.outputs.sdk_version }}"
          git push origin "v$VERSION"
          echo "‚úÖ Pushed tag v$VERSION to remote"

      - name: Build package
        if: steps.check-version-new.outputs.version_is_new == 'true'
        run: |
          echo "Building Python package..."
          poetry build
          echo "‚úÖ Package built successfully"

      - name: Publish to PyPI
        if: steps.check-version-new.outputs.version_is_new == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Create GitHub Release
        if: steps.check-version-new.outputs.version_is_new == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.current-version.outputs.sdk_version }}';
            const commitSha = '${{ github.sha }}';
            
            // Get the previous tag to generate release notes
            let previousTag = null;
            try {
              const { data: tags } = await github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 10
              });
              
              // Find the most recent tag that's not the current version
              previousTag = tags.find(tag => tag.name !== `v${version}`)?.name;
            } catch (error) {
              console.log('Could not fetch previous tags:', error.message);
            }
            
            // Generate automatic release notes
            let automaticReleaseNotes = '';
            if (previousTag) {
              try {
                const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: `v${version}`,
                  previous_tag_name: previousTag,
                });
                automaticReleaseNotes = releaseNotes.body;
              } catch (error) {
                console.log('Could not generate automatic release notes:', error.message);
              }
            }
            
            // Get the commit message for context
            const { data: commit } = await github.rest.git.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha,
            });
            
            // Build comprehensive release body
            let releaseBody = `## üêç Reya Python SDK Release ${version}
            
            The official Python SDK for interacting with the Reya ecosystem, now available on PyPI!
            
            ### üì¶ Installation
            \`\`\`bash
            pip install reya-python-sdk
            \`\`\`
            
            ### üöÄ Features
            - **REST API Client** - HTTP client for Reya's Trading API
            - **RPC Client** - Web3-based client for on-chain actions
            - **WebSocket Client** - Real-time data streaming client
            
            ### üìã Release Details
            - **Release Tag**: \`v${version}\`
            - **PyPI Package**: [\`reya-python-sdk==${version}\`](https://pypi.org/project/reya-python-sdk/${version}/)
            - **Commit**: \`${commitSha.substring(0, 7)}\`
            - **Previous Version**: ${previousTag ? `\`${previousTag}\`` : '_First release_'}
            
            ### üîÑ Latest Changes
            **${commit.message.split('\n')[0]}**`;
            
            if (commit.message.split('\n').length > 1) {
              const additionalLines = commit.message.split('\n').slice(1).filter(line => line.trim()).join('\n');
              if (additionalLines) {
                releaseBody += `\n\n${additionalLines}`;
              }
            }
            
            // Add automatic release notes if available
            if (automaticReleaseNotes) {
              releaseBody += `\n\n---\n\n${automaticReleaseNotes}`;
            }
            
            releaseBody += `\n\n---\n\nü§ñ *This release was automatically created and published to PyPI after merging changes to main branch.*`;
            
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `üè∑Ô∏è Release v${version}`,
              body: releaseBody,
              draft: false,
              prerelease: false,
              generate_release_notes: false, // We're creating custom notes
            });
            
            console.log(`‚úÖ Created GitHub release: ${release.html_url}`);

      - name: Report results
        if: always()
        run: |
          echo "=== Post-Merge Tagging and Publishing Results ==="
          echo "SDK Version: ${{ steps.current-version.outputs.sdk_version }}"
          echo "Version is New: ${{ steps.check-version-new.outputs.version_is_new }}"
          
          if [ "${{ steps.check-version-new.outputs.version_is_new }}" = "true" ]; then
            echo "‚úÖ Successfully created tag, published to PyPI, and created GitHub release for version v${{ steps.current-version.outputs.sdk_version }}"
            echo "üêç PyPI: https://pypi.org/project/reya-python-sdk/${{ steps.current-version.outputs.sdk_version }}/"
          elif [ "${{ steps.check-version-new.outputs.version_is_new }}" = "false" ]; then
            echo "‚ö†Ô∏è Skipped: Version v${{ steps.current-version.outputs.sdk_version }} already exists"
          fi