# coding: utf-8

"""
    Reya DEX Trading API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from sdk.open_api.models.side import Side
from typing import Optional, Set
from typing_extensions import Self

class Position(BaseModel):
    """
    Position
    """ # noqa: E501
    exchange_id: StrictInt = Field(alias="exchangeId")
    symbol: Annotated[str, Field(strict=True)] = Field(description="Trading symbol (e.g., BTCRUSDPERP, ETHRUSD)")
    account_id: StrictInt = Field(alias="accountId")
    qty: StrictStr
    side: Side
    avg_entry_price: StrictStr = Field(alias="avgEntryPrice")
    avg_entry_funding_value: StrictStr = Field(description="Average of funding values at the entry times of currently open exposure, which serves as a baseline from which to compute the accrued funding in the position: units x (fundingValue - avgEntryFundingValue)", alias="avgEntryFundingValue")
    last_trade_sequence_number: StrictInt = Field(description="Sequence number of last execution taken into account for the position.", alias="lastTradeSequenceNumber")
    __properties: ClassVar[List[str]] = ["exchangeId", "symbol", "accountId", "qty", "side", "avgEntryPrice", "avgEntryFundingValue", "lastTradeSequenceNumber"]

    @field_validator('symbol')
    def symbol_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Position from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Position from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exchangeId": obj.get("exchangeId"),
            "symbol": obj.get("symbol"),
            "accountId": obj.get("accountId"),
            "qty": obj.get("qty"),
            "side": obj.get("side"),
            "avgEntryPrice": obj.get("avgEntryPrice"),
            "avgEntryFundingValue": obj.get("avgEntryFundingValue"),
            "lastTradeSequenceNumber": obj.get("lastTradeSequenceNumber")
        })
        return _obj


